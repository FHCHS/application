<?php
  require('CFsoap.php');
function application_form_page4($form_state) {
  $form = array();

  ahah_helper_register($form, $form_state);
  $states = get_sonis_drop_box("state");
// page 4
// Statistical Data
$form['Statistical Data'] = array(
    '#type' => 'fieldset',
    '#title' => t('Statistical Data'),
	'#description' => "This information is collected for reporting purposes and is not considered for admissions.",
	'#prefix' => '<div id="Statistical-Data-information-wrapper">', // This is our wrapper div.
    '#suffix' => '</div>',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
$form['Statistical Data']['gender'] = array(
	'#type' => 'select',
	'#title' => t('Gender'),
	'#default_value' => $form_state['values']['gender'], 
	'#required' => TRUE,
	'#options' => array(
	    'I prefer not to share.' => t('I prefer not to share.'),
		'F' => t('Female'),
		'M' => t('Male')		
		),
);

// ethinic origin must be two step question
$form['Statistical Data']['ethnicorigin'] = array(
	'#type' => 'select',
	'#title' => t('Are you a form of hispanic'),
	'#default_value' => $form_state['values']['ethnicorigin'], 
	'#required' => TRUE,
	    '#ahah' => array(
		'path' => ahah_helper_path(array('Statistical Data')),
		'wrapper' => 'Statistical-Data-information-wrapper',
		'method' => 'replace',
		'event' => 'change',
		'effect' => 'fade',
  	),
	'#options' => array(
		'Yes' => t('Yes'),
		'No' => t('No'),
		'I prefer not to share.' => t('I prefer not to share.')),
); 

$form['Statistical Data']['update_ethnicorigin'] = array(
	'#type' => 'submit',
	'#value' => t('ethnicorigin'),
	// Note that we can simply use the generic submit callback provided by the
	// ahah_helper module here!
	// All it does, is set $form_state['rebuild'] = TRUE.
	'#submit' => array('ahah_helper_generic_submit'),
	// We set the 'no-js' class, which means this submit button will be hidden
	// automatically by Drupal if JS is enabled.
	'#attributes' => array('class' => 'no-js'),
);
if ($form_state['values']['ethnicorigin'] == "No" || $form_state['values']['ethnicorigin'] == "I prefer not to share." ) {
	$form['Statistical Data']['ethnicorigin2'] = array(
		'#type' => 'select',
		'#title' => t('Ethnic Origin'),
		'#default_value' => $form_state['values']['ethnicorigin2'], 
		'#required' => TRUE,
		'#options' => array(t('Need List'), t('No'), t('I prefer not to share.')),
	); 
}



//Language is a two step question
$form['Statistical Data']['language'] = array(
	'#type' => 'select',
	'#title' => t('Is English your native language.'),
	'#default_value' => $form_state['values']['language'], 
	'#required' => TRUE,
	    '#ahah' => array(
		'path' => ahah_helper_path(array('Statistical Data')),
		'wrapper' => 'Statistical-Data-information-wrapper',
		'method' => 'replace',
		'event' => 'change',
		'effect' => 'fade',
  	),
	'#options' => array(
		'Yes' => t('Yes'),
		'No' => t('No')
		),
); 

$form['Statistical Data']['update_ethnicorigin'] = array(
	'#type' => 'submit',
	'#value' => t('language'),
	// Note that we can simply use the generic submit callback provided by the
	// ahah_helper module here!
	// All it does, is set $form_state['rebuild'] = TRUE.
	'#submit' => array('ahah_helper_generic_submit'),
	// We set the 'no-js' class, which means this submit button will be hidden
	// automatically by Drupal if JS is enabled.
	'#attributes' => array('class' => 'no-js'),
);
if ($form_state['values']['language'] == "No") {
	$form['Statistical Data']['nativelanguage'] = array(
		'#type' => 'select',
		'#title' => t('Native Language'),
		'#default_value' => $form_state['values']['nativelanguage'], 
		'#required' => TRUE,
		'#options' => array(
			'abk' => t('Abkhaz'),
			'ace' => t('Achinese'),
			'ach' => t('Acoli'),
			'ada' => t('Adangme'),
			'ady' => t('Adygei'),
			'aar' => t('Afar'),
			'afh' => t('Afrihili (Artificial language)'),
			'afr' => t('Afrikaans'),
			'afa' => t('Afroasiatic (Other)'),
			'ain' => t('Ainu'),
			'aka' => t('Akan'),
			'akk' => t('Akkadian'),
			'alb' => t('Albanian'),
			'ale' => t('Aleut'),
			'alg' => t('Algonquian (Other)'),
			'alt' => t('Altai'),
			'tut' => t('Altaic (Other)'),
			'amh' => t('Amharic'),
			'anp' => t('Angika'),
			'apa' => t('Apache languages'),
			'ara' => t('Arabic'),
			'arg' => t('Aragonese Spanish'),
			'arc' => t('Aramaic'),
			'arp' => t('Arapaho'),
			'arw' => t('Arawak'),
			'arm' => t('Armenian'),
			'rup' => t('Aromanian'),
			'art' => t('Artificial (Other)'),
			'asm' => t('Assamese'),
			'ath' => t('Athapascan (Other)'),
			'aus' => t('Australian languages'),
			'map' => t('Austronesian (Other)'),
			'ava' => t('Avaric'),
			'ave' => t('Avestan'),
			'awa' => t('Awadhi'),
			'aym' => t('Aymara'),
			'aze' => t('Azerbaijani'),
			'ast' => t('Bable'),
			'ban' => t('Balinese'),
			'bat' => t('Baltic (Other)'),
			'bal' => t('Baluchi'),
			'bam' => t('Bambara'),
			'bai' => t('Bamileke languages'),
			'bad' => t('Banda languages'),
			'bnt' => t('Bantu (Other)'),
			'bas' => t('Basa'),
			'bak' => t('Bashkir'),
			'baq' => t('Basque'),
			'btk' => t('Batak'),
			'bej' => t('Beja'),
			'bel' => t('Belarusian'),
			'bem' => t('Bemba'),
			'ben' => t('Bengali'),
			'ber' => t('Berber (Other)'),
			'bho' => t('Bhojpuri'),
			'bih' => t('Bihari'),
			'bik' => t('Bikol'),
			'byn' => t('Bilin'),
			'bis' => t('Bislama'),
			'zbl' => t('Blissymbolics'),
			'bos' => t('Bosnian'),
			'bra' => t('Braj'),
			'bre' => t('Breton'),
			'bug' => t('Bugis'),
			'bul' => t('Bulgarian'),
			'bua' => t('Buriat'),
			'bur' => t('Burmese'),
			'cad' => t('Caddo'),
			'car' => t('Carib'),
			'cat' => t('Catalan'),
			'cau' => t('Caucasian (Other)'),
			'ceb' => t('Cebuano'),
			'cel' => t('Celtic (Other)'),
			'cai' => t('Central American Indian (Other)'),
			'chg' => t('Chagatai'),
			'cmc' => t('Chamic languages'),
			'cha' => t('Chamorro'),
			'che' => t('Chechen'),
			'chr' => t('Cherokee'),
			'chy' => t('Cheyenne'),
			'chb' => t('Chibcha'),
			'chi' => t('Chinese'),
			'chn' => t('Chinook jargon'),
			'chp' => t('Chipewyan'),
			'cho' => t('Choctaw'),
			'chu' => t('Church Slavic'),
			'chk' => t('Chuukese'),
			'chv' => t('Chuvash'),
			'cop' => t('Coptic'),
			'cor' => t('Cornish'),
			'cos' => t('Corsican'),
			'cre' => t('Cree'),
			'mus' => t('Creek'),
			'crp' => t('Creoles and Pidgins (Other)'),
			'cpe' => t('Creoles and Pidgins, English-based (Other)'),
			'cpf' => t('Creoles and Pidgins, French-based (Other)'),
			'cpp' => t('Creoles and Pidgins, Portuguese-based (Other)'),
			'crh' => t('Crimean Tatar'),
			'scr' => t('Croatian'),
			'cus' => t('Cushitic (Other)'),
			'cze' => t('Czech'),
			'dak' => t('Dakota'),
			'dan' => t('Danish'),
			'dar' => t('Dargwa'),
			'day' => t('Dayak'),
			'del' => t('Delaware'),
			'din' => t('Dinka'),
			'div' => t('Divehi'),
			'doi' => t('Dogri'),
			'dgr' => t('Dogrib'),
			'dra' => t('Dravidian (Other)'),
			'dua' => t('Duala'),
			'dut' => t('Dutch'),
			'dum' => t('Dutch, Middle (ca. 1050-1350)'),
			'dyu' => t('Dyula'),
			'dzo' => t('Dzongkha'),
			'frs' => t('East Frisian'),
			'bin' => t('Edo'),
			'efi' => t('Efik'),
			'egy' => t('Egyptian'),
			'eka' => t('Ekajuk'),
			'elx' => t('Elamite'),
			'eng' => t('English'),
			'enm' => t('English, Middle (1100-1500)'),
			'ang' => t('English, Old (ca. 450-1100)'),
			'myv' => t('Erzya'),
			'epo' => t('Esperanto'),
			'est' => t('Estonian'),
			'gez' => t('Ethiopic'),
			'ewe' => t('Ewe'),
			'ewo' => t('Ewondo'),
			'fan' => t('Fang'),
			'fat' => t('Fanti'),
			'fao' => t('Faroese'),
			'fij' => t('Fijian'),
			'fil' => t('Filipino'),
			'fin' => t('Finnish'),
			'fiu' => t('Finno-Ugrian (Other)'),
			'fon' => t('Fon'),
			'fre' => t('French'),
			'frm' => t('French, Middle (ca. 1300-1600)'),
			'fro' => t('French, Old (ca. 842-1300)'),
			'fry' => t('Frisian'),
			'fur' => t('Friulian'),
			'ful' => t('Fula'),
			'gaa' => t('Ga'),
			'glg' => t('Galician'),
			'lug' => t('Ganda'),
			'gay' => t('Gayo'),
			'gba' => t('Gbaya'),
			'geo' => t('Georgian'),
			'ger' => t('German'),
			'gmh' => t('German, Middle High (ca. 1050-1500)'),
			'goh' => t('German, Old High (ca. 750-1050)'),
			'gem' => t('Germanic (Other)'),
			'gil' => t('Gilbertese'),
			'gon' => t('Gondi'),
			'gor' => t('Gorontalo'),
			'got' => t('Gothic'),
			'grb' => t('Grebo'),
			'grc' => t('Greek, Ancient (to 1453)'),
			'gre' => t('Greek, Modern (1453- )'),
			'grn' => t('Guarani'),
			'guj' => t('Gujarati'),
			'gwi' => t('Gwich\'in'),
			'hai' => t('Haida'),
			'hat' => t('Haitian French Creole'),
			'hau' => t('Hausa'),
			'haw' => t('Hawaiian'),
			'heb' => t('Hebrew'),
			'her' => t('Herero'),
			'hil' => t('Hiligaynon'),
			'him' => t('Himachali'),
			'hin' => t('Hindi'),
			'hmo' => t('Hiri Motu'),
			'hit' => t('Hittite'),
			'hmn' => t('Hmong'),
			'hun' => t('Hungarian'),
			'hup' => t('Hupa'),
			'iba' => t('Iban'),
			'ice' => t('Icelandic'),
			'ido' => t('Ido'),
			'ibo' => t('Igbo'),
			'ijo' => t('Ijo'),
			'ilo' => t('Iloko'),
			'smn' => t('Inari Sami'),
			'inc' => t('Indic (Other)'),
			'ine' => t('Indo-European (Other)'),
			'ind' => t('Indonesian'),
			'inh' => t('Ingush'),
			'ina' => t('Interlingua (International Auxiliary Language Association)'),
			'ile' => t('Interlingue'),
			'iku' => t('Inuktitut'),
			'ipk' => t('Inupiaq'),
			'ira' => t('Iranian (Other)'),
			'gle' => t('Irish'),
			'mga' => t('Irish, Middle (ca. 1100-1550)'),
			'sga' => t('Irish, Old (to 1100)'),
			'iro' => t('Iroquoian (Other)'),
			'ita' => t('Italian'),
			'jpn' => t('Japanese'),
			'jav' => t('Javanese'),
			'jrb' => t('Judeo-Arabic'),
			'jpr' => t('Judeo-Persian'),
			'kbd' => t('Kabardian'),
			'kab' => t('Kabyle'),
			'kac' => t('Kachin'),
			'kal' => t('Kalatdlisut'),
			'kam' => t('Kamba'),
			'kan' => t('Kannada'),
			'kau' => t('Kanuri'),
			'krc' => t('Karachay-Balkar'),
			'kaa' => t('Kara-Kalpak'),
			'krl' => t('Karelian'),
			'kar' => t('Karen languages'),
			'kas' => t('Kashmiri'),
			'csb' => t('Kashubian'),
			'kaw' => t('Kawi'),
			'kaz' => t('Kazakh'),
			'kha' => t('Khasi'),
			'khm' => t('Khmer'),
			'khi' => t('Khoisan (Other)'),
			'kho' => t('Khotanese'),
			'kik' => t('Kikuyu'),
			'kmb' => t('Kimbundu'),
			'kin' => t('Kinyarwanda'),
			'tlh' => t('Klingon (Artificial language)'),
			'kom' => t('Komi'),
			'kon' => t('Kongo'),
			'kok' => t('Konkani'),
			'kut' => t('Kootenai'),
			'kor' => t('Korean'),
			'kpe' => t('Kpelle'),
			'kro' => t('Kru (Other)'),
			'kua' => t('Kuanyama'),
			'kum' => t('Kumyk'),
			'kur' => t('Kurdish'),
			'kru' => t('Kurukh'),
			'kos' => t('Kusaie'),
			'kir' => t('Kyrgyz'),
			'lad' => t('Ladino'),
			'lah' => t('Lahnda'),
			'lam' => t('Lamba (Zambia and Congo)'),
			'lao' => t('Lao'),
			'lat' => t('Latin'),
			'lav' => t('Latvian'),
			'lez' => t('Lezgian'),
			'lim' => t('Limburgish'),
			'lin' => t('Lingala'),
			'lit' => t('Lithuanian'),
			'jbo' => t('Lojban (Artificial language)'),
			'nds' => t('Low German'),
			'dsb' => t('Lower Sorbian'),
			'loz' => t('Lozi'),
			'lub' => t('Luba-Katanga'),
			'lua' => t('Luba-Lulua'),
			'lui' => t('Luiseno'),
			'smj' => t('Lule Sami'),
			'lun' => t('Lunda'),
			'luo' => t('Luo (Kenya and Tanzania)'),
			'lus' => t('Lushai'),
			'ltz' => t('Luxembourgish'),
			'mac' => t('Macedonian'),
			'mad' => t('Madurese'),
			'mag' => t('Magahi'),
			'mai' => t('Maithili'),
			'mak' => t('Makasar'),
			'mlg' => t('Malagasy'),
			'may' => t('Malay'),
			'mal' => t('Malayalam'),
			'mlt' => t('Maltese'),
			'mnc' => t('Manchu'),
			'mdr' => t('Mandar'),
			'man' => t('Mandingo'),
			'mni' => t('Manipuri'),
			'mno' => t('Manobo languages'),
			'glv' => t('Manx'),
			'mao' => t('Maori'),
			'arn' => t('Mapuche'),
			'mar' => t('Marathi'),
			'chm' => t('Mari'),
			'mah' => t('Marshallese'),
			'mwr' => t('Marwari'),
			'mas' => t('Masai'),
			'myn' => t('Mayan languages'),
			'men' => t('Mende'),
			'mic' => t('Micmac'),
			'min' => t('Minangkabau'),
			'mwl' => t('Mirandese'),
			'mis' => t('Miscellaneous languages'),
			'moh' => t('Mohawk'),
			'mdf' => t('Moksha'),
			'mol' => t('Moldavian'),
			'mon' => t('Mongolian'),
			'lol' => t('Mongo-Nkundu'),
			'mkh' => t('Mon-Khmer (Other)'),
			'mos' => t('Moore'),
			'mul' => t('Multiple languages'),
			'mun' => t('Munda (Other)'),
			'nah' => t('Nahuatl'),
			'nau' => t('Nauru'),
			'nav' => t('Navajo'),
			'nbl' => t('Ndebele (South Africa)'),
			'nde' => t('Ndebele (Zimbabwe)'),
			'ndo' => t('Ndonga'),
			'nap' => t('Neapolitan Italian'),
			'nep' => t('Nepali'),
			'new' => t('Newari'),
			'nwc' => t('Newari, Old'),
			'nia' => t('Nias'),
			'nic' => t('Niger-Kordofanian (Other)'),
			'ssa' => t('Nilo-Saharan (Other)'),
			'niu' => t('Niuean'),
			'nqo' => t('N\'Ko'),
			'zxx' => t('No linguistic content'),
			'nog' => t('Nogai'),
			'nai' => t('North American Indian (Other)'),
			'frr' => t('North Frisian'),
			'sme' => t('Northern Sami'),
			'nso' => t('Northern Sotho'),
			'nor' => t('Norwegian'),
			'nob' => t('Norwegian (Bokmal)'),
			'nno' => t('Norwegian (Nynorsk)'),
			'nub' => t('Nubian languages'),
			'nym' => t('Nyamwezi'),
			'nya' => t('Nyanja'),
			'nyn' => t('Nyankole'),
			'nyo' => t('Nyoro'),
			'nzi' => t('Nzima'),
			'oci' => t('Occitan (post 1500)'),
			'xal' => t('Oirat'),
			'oji' => t('Ojibwa'),
			'non' => t('Old Norse'),
			'peo' => t('Old Persian (ca. 600-400 B.C.)'),
			'ori' => t('Oriya'),
			'orm' => t('Oromo'),
			'osa' => t('Osage'),
			'oss' => t('Ossetic'),
			'oto' => t('Otomian languages'),
			'pal' => t('Pahlavi'),
			'pau' => t('Palauan'),
			'pli' => t('Pali'),
			'pam' => t('Pampanga'),
			'pag' => t('Pangasinan'),
			'pan' => t('Panjabi'),
			'pap' => t('Papiamento'),
			'paa' => t('Papuan (Other)'),
			'per' => t('Persian'),
			'phi' => t('Philippine (Other)'),
			'phn' => t('Phoenician'),
			'pol' => t('Polish'),
			'pon' => t('Ponape'),
			'por' => t('Portuguese'),
			'pra' => t('Prakrit languages'),
			'pro' => t('Provencal (to 1500)'),
			'pus' => t('Pushto'),
			'que' => t('Quechua'),
			'roh' => t('Raeto-Romance'),
			'raj' => t('Rajasthani'),
			'rap' => t('Rapanui'),
			'rar' => t('Rarotongan'),
			'roa' => t('Romance (Other)'),
			'rom' => t('Romani'),
			'rum' => t('Romanian'),
			'run' => t('Rundi'),
			'rus' => t('Russian'),
			'sal' => t('Salishan languages'),
			'sam' => t('Samaritan Aramaic'),
			'smi' => t('Sami'),
			'smo' => t('Samoan'),
			'sad' => t('Sandawe'),
			'sag' => t('Sango (Ubangi Creole)'),
			'san' => t('Sanskrit'),
			'sat' => t('Santali'),
			'srd' => t('Sardinian'),
			'sas' => t('Sasak'),
			'sco' => t('Scots'),
			'gla' => t('Scottish Gaelic'),
			'sel' => t('Selkup'),
			'sem' => t('Semitic (Other)'),
			'scc' => t('Serbian'),
			'srr' => t('Serer'),
			'shn' => t('Shan'),
			'sna' => t('Shona'),
			'iii' => t('Sichuan Yi'),
			'scn' => t('Sicilian Italian'),
			'sid' => t('Sidamo'),
			'sgn' => t('Sign languages'),
			'bla' => t('Siksika'),
			'snd' => t('Sindhi'),
			'sin' => t('Sinhalese'),
			'sit' => t('Sino-Tibetan (Other)'),
			'sio' => t('Siouan (Other)'),
			'sms' => t('Skolt Sami'),
			'den' => t('Slave'),
			'sla' => t('Slavic (Other)'),
			'slo' => t('Slovak'),
			'slv' => t('Slovenian'),
			'sog' => t('Sogdian'),
			'som' => t('Somali'),
			'son' => t('Songhai'),
			'snk' => t('Soninke'),
			'wen' => t('Sorbian (Other)'),
			'sot' => t('Sotho'),
			'sai' => t('South American Indian (Other)'),
			'sma' => t('Southern Sami'),
			'spa' => t('Spanish'),
			'srn' => t('Sranan'),
			'suk' => t('Sukuma'),
			'sux' => t('Sumerian'),
			'sun' => t('Sundanese'),
			'sus' => t('Susu'),
			'swa' => t('Swahili'),
			'ssw' => t('Swazi'),
			'swe' => t('Swedish'),
			'gsw' => t('Swiss German'),
			'syc' => t('Syriac'),
			'syr' => t('Syriac, Modern'),
			'tgl' => t('Tagalog'),
			'tah' => t('Tahitian'),
			'tai' => t('Tai (Other)'),
			'tgk' => t('Tajik'),
			'tmh' => t('Tamashek'),
			'tam' => t('Tamil'),
			'tat' => t('Tatar'),
			'tel' => t('Telugu'),
			'tem' => t('Temne'),
			'ter' => t('Terena'),
			'tet' => t('Tetum'),
			'tha' => t('Thai'),
			'tib' => t('Tibetan'),
			'tig' => t('Tigre'),
			'tir' => t('Tigrinya'),
			'tiv' => t('Tiv'),
			'tli' => t('Tlingit'),
			'tpi' => t('Tok Pisin'),
			'tkl' => t('Tokelauan'),
			'tog' => t('Tonga (Nyasa)'),
			'ton' => t('Tongan'),
			'tsi' => t('Tsimshian'),
			'tso' => t('Tsonga'),
			'tsn' => t('Tswana'),
			'tum' => t('Tumbuka'),
			'tup' => t('Tupi languages'),
			'tur' => t('Turkish'),
			'ota' => t('Turkish, Ottoman'),
			'tuk' => t('Turkmen'),
			'tvl' => t('Tuvaluan'),
			'tyv' => t('Tuvinian'),
			'twi' => t('Twi'),
			'udm' => t('Udmurt'),
			'uga' => t('Ugaritic'),
			'uig' => t('Uighur'),
			'ukr' => t('Ukrainian'),
			'umb' => t('Umbundu'),
			'und' => t('Undetermined'),
			'hsb' => t('Upper Sorbian'),
			'urd' => t('Urdu'),
			'uzb' => t('Uzbek'),
			'vai' => t('Vai'),
			'ven' => t('Venda'),
			'vie' => t('Vietnamese'),
			'vol' => t('Volapuk'),
			'vot' => t('Votic'),
			'wak' => t('Wakashan languages'),
			'wln' => t('Walloon'),
			'war' => t('Waray'),
			'was' => t('Washo'),
			'wel' => t('Welsh'),
			'wal' => t('Wolayta'),
			'wol' => t('Wolof'),
			'xho' => t('Xhosa'),
			'sah' => t('Yakut'),
			'yao' => t('Yao (Africa)'),
			'yap' => t('Yapese'),
			'yid' => t('Yiddish'),
			'yor' => t('Yoruba'),
			'ypk' => t('Yupik languages'),
			'znd' => t('Zande languages'),
			'zap' => t('Zapotec'),
			'zza' => t('Zaza'),
			'zen' => t('Zenaga'),
			'zha' => t('Zhuang'),
			'zul' => t('Zulu'),
			'zun' => t('Zuni')
		),
		'#description' => t('Proof of English proficiency is required for admission.')
	);
}
$form['Statistical Data']['maritalstatus'] = array(
	'#type' => 'select',
	'#title' => t('Marital Status'),
	'#default_value' => $form_state['values']['maritalstatus'], 
	'#required' => TRUE,
	'#options' => array('Married' => t('Married'),
	'Not Married' => t('Not Married'),
	'I prefer not to share.' => t('I prefer not to share.')
	),
);

  
 // Religion fieldSet
$form['Religion Information'] = array(
    '#type' => 'fieldset',
    '#title' => t('religion'),
	'#description' => "",
	'#prefix' => '<div id="religion-information-wrapper">', // This is our wrapper div.
    '#suffix' => '</div>',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  
$form['Religion Information']['religion'] = array(
	'#type' => 'select',
	'#title' => t('religion'),
	'#default_value' => $form_state['values']['religion'], 
	'#required' => TRUE,
    '#ahah' => array(
		'path' => ahah_helper_path(array('Religion Information')),
		'wrapper' => 'religion-information-wrapper',
		'method' => 'replace',
		'event' => 'change',
		'effect' => 'fade',
  	),
	'#options' => array(
		'Yes' => t('Yes'),
		'No' => t('No'),
		'I prefer not to share.' => t('I prefer not to share.')
	),
);
$form['Religion Information']['update_religion'] = array(
	'#type' => 'submit',
	'#value' => t('religion'),
	// Note that we can simply use the generic submit callback provided by the
	// ahah_helper module here!
	// All it does, is set $form_state['rebuild'] = TRUE.
	'#submit' => array('ahah_helper_generic_submit'),
	// We set the 'no-js' class, which means this submit button will be hidden
	// automatically by Drupal if JS is enabled.
	'#attributes' => array('class' => 'no-js'),
);


if ($form_state['values']['religion'] == "" || $form_state['values']['religion'] == "Yes" ) {
	// if Adventist then show Home church + City and State
	$form['Religion Information']['religionhomechurch'] = array(
		'#type' => 'textfield',
		'#title' => t('Name of Home Church'),
		'#default_value' => $form_state['values']['religionhomechurch'], 
		'#required' => FALSE,
	);
	$form['Religion Information']['religionhomechurchcity'] = array(
		'#type' => 'textfield',
		'#title' => t('Home Church City'),
		'#default_value' => $form_state['values']['religionhomechurchcity'], 
		'#required' => FALSE,
	);
	$form['Religion Information']['religionhomechurchstate'] = array(
		'#type' => 'select',
		'#title' => t('Home Church State'),
		'#default_value' => $form_state['values']['religionhomechurchstate'], 
		'#options' => $states,
		'#required' => FALSE,
	);

  }

return ($form);

}
